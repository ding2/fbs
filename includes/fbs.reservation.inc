<?php

/**
 * @file
 * Handles user reservations.
 */

/**
 * Implements provider reservation, list.
 */
function fbs_reservation_list($account, $requested_type = NULL) {
  $result = array(
    DING_RESERVATION_READY => array(),
    DING_RESERVATION_NOT_READY => array(),
    DING_RESERVATION_INTERLIBRARY_LOANS => array(),
  );

  $res = fbs_service()->Reservations->getReservations(fbs_service()->agencyId, fbs_patron_id($account));

  foreach ($res as $reservation) {
    $type = $reservation->state == 'readyForPickup' ? DING_RESERVATION_READY : DING_RESERVATION_NOT_READY;
    $type = $reservation->state == 'interLibraryReservation' ? DING_RESERVATION_INTERLIBRARY_LOANS : $type;
    $ding_reservation = array(
      'ding_entity_id' => $reservation->recordId,
      'id' => $reservation->reservationId,
      'pickup_branch_id' => $reservation->pickupBranch,
      'created' => $reservation->dateOfReservation,
      'expiry' => $reservation->expiryDate,
    );

    if ($type === DING_RESERVATION_READY) {
      $ding_reservation['pickup_date'] = $reservation->pickupDeadline;
    }
    elseif ($type === DING_RESERVATION_NOT_READY || $type === DING_RESERVATION_INTERLIBRARY_LOANS) {
      if (!empty($reservation->numberInQueue)) {
        $ding_reservation['queue_number'] = $reservation->numberInQueue;
      }
    }

    // Add in periodical information if it is one.
    if ($reservation->periodical) {
      $periodical = $reservation->periodical;
      $vol = $periodical->volume;
      if (!empty($periodical->volumeNumber)) {
        $vol .= '.' . $periodical->volumeNumber;
      }
      if (!empty($periodical->volumeYear)) {
        $ding_reservation['notes'] = t('Issue @vol, @year', array('@vol' => $vol, '@year' => $periodical->volumeYear));
      }
      else {
        $ding_reservation['notes'] = t('Issue @vol', array('@vol' => $vol));
      }
    }

    $result[$type][$ding_reservation['id']] = new DingProviderReservation($ding_reservation['id'], $ding_reservation);
  }

  if ($requested_type) {
    if (isset($result[$requested_type])) {
      return $result[$requested_type];
    }
    else {
      watchdog('fbs', 'Unknown reservation type (%type) requested', array('%type' => $requested_type), WATCHDOG_ERROR);
      return array();
    }
  }

  return $result;
}

/**
 * Implements provider reservation, create.
 */
function fbs_reservation_create($account, $local_ids, $options) {
  $batch = new FBS\Model\CreateReservationBatch();
  $batch->reservations = array();
  foreach ($local_ids as $local_id) {
    $reservation = new FBS\Model\CreateReservation();
    if (preg_match('/^fbs-/', $local_id)) {
      list($local_id, $periodical) = _fbs_periodical_parse_local_id($local_id);
      $reservation->recordId = _fbs_get_record_id($local_id);
      $reservation->preiodical = $periodical;
    }
    else {
      $reservation->recordId = _fbs_get_record_id($local_id);
    }
    $reservation->expiryDate = date('Y-m-d', REQUEST_TIME + ($options['interest_period'] * 24 * 60 * 60));
    $reservation->pickupBranch = $options['preferred_branch'];
    $batch->reservations[] = $reservation;
  }
  $res = fbs_service()->Reservations->addReservations(fbs_service()->agencyId, fbs_patron_id($account), $batch);
}

/**
 * Implements provider reservation, delete.
 */
function fbs_reservation_update($account, $reservation_ids, $options) {
  $batch = new FBS\Model\UpdateReservationBatch();
  $batch->reservations = array();
  foreach ($reservation_ids as $reservation_id) {
    $reservation = new FBS\Model\UpdateReservation();
    $reservation->reservationId = $reservation_id;
    $reservation->expiryDate = date('Y-m-d', REQUEST_TIME + ($options['interest_period'] * 24 * 60 * 60));
    $reservation->pickupBranch = $options['preferred_branch'];
    $batch->reservations[] = $reservation;
  }
  $res = fbs_service()->Reservations->updateReservations(fbs_service()->agencyId, fbs_patron_id($account), $batch);
}

/**
 * Implements provider reservation, delete.
 */
function fbs_reservation_delete($account, $reservation_id) {
  $res = fbs_service()->Reservations->deleteReservations(fbs_service()->agencyId, fbs_patron_id($account), $reservation_id);
}

/**
 * Implements provider reservation, reservation_deletion_enabled.
 *
 * Check where reservation deletion have been enabled in the providers settings.
 */
function fbs_reservation_reservation_deletion_enabled() {
  return variable_get('fbs_enable_reservation_deletion', FALSE);
}

/**
 * Implements provider reservation, branch_name.
 */
function fbs_reservation_branch_name($branch_id) {
  $res = fbs_service()->Placement->getBranches(fbs_service()->agencyId);
  foreach ($res as $branch) {
    if ($branch->branchId == $branch_id) {
      return $branch->title;
    }
  }

  return NULL;
}

/**
 * Implements provider reservation, default_options.
 */
function fbs_reservation_default_options($account) {
  $creds = fbs_get_creds($account);
  return array(
    'preferred_branch' => $creds['preferred_branch'],
    'interest_period' => $creds['interest_period'],
  );
}

/**
 * Implements provider reservation, options.
 */
function fbs_reservation_options($account, $default_branch) {
  $creds = fbs_get_creds($account);

  $interest_period = $creds['interest_period'];
  $preferred_branch = empty($default_branch) ? $creds['preferred_branch'] : $default_branch;

  $form = array();
  $form += ding_reservation_default_options_branch('preferred_branch', $preferred_branch, fbs_branches());
  $form += ding_reservation_interest_period_selector('interest_period', $interest_period, fbs_interest_periods());

  return $form;
}

/**
 * Implements provider reservation, options_submit.
 */
function fbs_reservation_options_submit($account, $values) {
  fbs_update_preferred_branch($account, $values['preferred_branch']);
}

/**
 * Implements provider reservation, default_interst_period.
 */
function fbs_reservation_default_interest_period() {
  $creds = fbs_get_creds();
  if (isset($creds['interest_period'])) {
    return $creds['interest_period'];
  }

  return variable_get('fbs_default_interest_period', 180);
}
